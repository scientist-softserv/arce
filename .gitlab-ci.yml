stages:
  - build
  - go

before_script:
  - export TAG=${CI_COMMIT_SHORT_SHA}
  - export BRANCH=${CI_COMMIT_REF_NAME}
  - export REGISTRY_HOST=${CI_REGISTRY}
  - export REGISTRY_URI="/${CI_PROJECT_PATH}"
  - touch .env.development

build:
  stage: build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - sc build
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - sc push
    - docker tag $CI_REGISTRY_IMAGE:$TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  tags:
    - local

test:
  stage: go
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  services:
    - name: postgres:11.1
    - name: solr:latest
      entrypoint: ["docker-entrypoint.sh", "solr-precreate", "test"]
    - name: selenium/standalone-chrome:3.141
  variables:
    GIT_STRATEGY: none
    CHROME_HOSTNAME: chrome
    IN_DOCKER: "true"
    PASSENGER_APP_ENV: development
    POSTGRES_DB: arce
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: password
    POSTGRES_USER: postgres
    SOLR_URL: http://solr:8983/solr/test
    TEST_DB: arce
  script:
    - cd /home/app/webapp
    - echo "$POSTGRES_HOST"
    - cd /home/app/webapp && bundle exec rake db:create db:schema:load spec
    - bundle install
    - bundle exec rspec --format progress --format RspecJunitFormatter --out rspec.xml
    - rm -f /home/app/webapp/tmp/capybara/*
    - rm -rf $CI_PROJECT_DIR/capybara
    # debugging tip: un-comment the sleep below in order to use k8's or docker to log into the actual running container
    # - sleep 30m
  after_script:
    - test -e /home/app/webapp/tmp/capybara && cp -r /home/app/webapp/tmp/capybara $CI_PROJECT_DIR/capybara
    - test -e /home/app/webapp/rspec.xml && cp /home/app/webapp/rspec.xml $CI_PROJECT_DIR/rspec.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: false
  artifacts:
    when: always
    paths:
      - rspec.xml
    reports:
      junit: rspec.xml
  tags:
    - docker

lint:
  stage: go
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  variables:
    PRONTO_GITLAB_API_ENDPOINT: "https://gitlab.com/api/v4"
  before_script:
    - export PRONTO_GITLAB_API_PRIVATE_TOKEN=$GITLAB_API_TOKEN
  allow_failure: false
  script:
    - git fetch && git checkout main && git checkout ${CI_COMMIT_SHORT_SHA}
    - bundle check || bundle
    - bundle exec pronto run -f gitlab -c origin/main
    - cd /home/app/webapp && bundle exec rubocop -P
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  tags:
    - docker

staging:
  stage: go
  script:
    - "keybase status | grep 'Logged in:     no' && keybase oneshot"
    - ./chart/bin/decrypt staging
    - ./chart/bin/deploy staging $CI_COMMIT_SHORT_SHA
  after_script:
    - rm -f ./chart/*-values.yaml
    - keybase logout
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
  allow_failure: true
  tags:
    - local

production:
  stage: go
  script:
    - export KUBECONFIG=$KUBECONFIG_PALS
    - "keybase status | grep 'Logged in:     no' && keybase oneshot"
    - ./chart/bin/decrypt production
    - ./chart/bin/deploy production $CI_COMMIT_SHORT_SHA
  after_script:
    - rm -f ./chart/*-values.yaml
    - keybase logout
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
  allow_failure: true
  tags:
    - local
